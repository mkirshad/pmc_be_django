# Generated by Django 5.1.3 on 2024-11-20 16:52

import django.core.validators
import django.db.models.deletion
import pmc_api.utils
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('pmc_api', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='TblDistricts',
            fields=[
                ('district_id', models.IntegerField(primary_key=True, serialize=False)),
                ('district_name', models.CharField(max_length=254)),
                ('district_code', models.CharField(max_length=254)),
            ],
            options={
                'verbose_name_plural': 'Districts',
                'db_table': 'tbl_districts',
                'ordering': ['district_name'],
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='TblDivisions',
            fields=[
                ('division_id', models.AutoField(primary_key=True, serialize=False)),
                ('division_name', models.CharField(max_length=254)),
                ('division_code', models.CharField(max_length=254)),
            ],
            options={
                'db_table': 'tbl_divisions',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='TblTehsils',
            fields=[
                ('tehsil_id', models.AutoField(primary_key=True, serialize=False)),
                ('tehsil_name', models.CharField(max_length=254)),
                ('tehsil_code', models.CharField(max_length=254, unique=True)),
            ],
            options={
                'db_table': 'tbl_tehsils',
                'ordering': ['tehsil_name'],
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='ByProducts',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('product_name', models.CharField(max_length=255, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='PlasticItems',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('item_name', models.CharField(max_length=255, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='Products',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('product_name', models.CharField(max_length=255, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='BusinessProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('entity_type', models.CharField(choices=[('individual', 'Individual'), ('company', 'Company/Corporation/Partnership')], default='individual', max_length=20)),
                ('tracking_number', models.CharField(max_length=100, unique=True)),
                ('name', models.CharField(blank=True, max_length=255, null=True)),
                ('ntn_strn_pra_no_individual', models.CharField(blank=True, max_length=20, null=True)),
                ('business_name', models.CharField(blank=True, max_length=255, null=True)),
                ('business_registration_type', models.CharField(blank=True, choices=[('sole_proprietorship', 'Sole Proprietorship'), ('aop', 'Association of Persons (AOP)'), ('public_ltd', 'Limited Company: Public Ltd'), ('private_ltd', 'Limited Company: Private Ltd'), ('single_member', 'Limited Company: Single Member')], max_length=50, null=True)),
                ('business_registration_no', models.CharField(blank=True, max_length=50, null=True)),
                ('ntn_strn_pra_no_company', models.CharField(blank=True, max_length=20, null=True)),
                ('working_days', models.IntegerField(choices=[(5, 5), (6, 6), (7, 7)], default=5, help_text='working days in the week')),
                ('commencement_date', models.DateField(blank=True, help_text='Date since commencement of Business', null=True)),
                ('no_of_workers', models.IntegerField(blank=True, help_text='Number of workers (including contract labour)', null=True)),
                ('city_town_village', models.CharField(help_text='Name of City/Town or Village', max_length=256)),
                ('postal_address', models.TextField()),
                ('postal_code', models.CharField(max_length=10)),
                ('location_latitude', models.DecimalField(decimal_places=6, help_text='Format: XX.XXXXXX, Range: 20.000000 to 40.000000, Unit: Decimal Degree', max_digits=9, validators=[pmc_api.utils.validate_latitude])),
                ('location_longitude', models.DecimalField(decimal_places=6, help_text='Format: XX.XXXXXX, Range: 60.000000 to 80.000000,Unit: Decimal Degree', max_digits=9, validators=[pmc_api.utils.validate_longitude])),
                ('email', models.EmailField(max_length=255)),
                ('mobile_operator', models.CharField(choices=[('jazz', 'Mobilink'), ('telenor', 'Telenor'), ('ufone', 'Ufone'), ('warid', 'Warid')], max_length=15)),
                ('mobile_no', models.CharField(help_text='3001234567', max_length=10, validators=[django.core.validators.MinLengthValidator(10), django.core.validators.RegexValidator(message="Mobile number must be exactly 10 digits, e.g., '3001234567'.", regex='^\\d{10}$')])),
                ('phone_no', models.CharField(help_text='042-12345678', max_length=12)),
                ('website_address', models.URLField(blank=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('applicant', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='pmc_api.applicantdetail')),
                ('district', models.ForeignKey(db_column='district_id', on_delete=django.db.models.deletion.CASCADE, to='pmc_api.tbldistricts', verbose_name='District')),
                ('tehsil', models.ForeignKey(db_column='tehsil_id', on_delete=django.db.models.deletion.CASCADE, to='pmc_api.tbltehsils', verbose_name='Tehsil')),
                ('updated_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Producer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('tracking_number', models.CharField(max_length=100, unique=True)),
                ('registration_required_for', models.CharField(blank=True, max_length=255, null=True)),
                ('total_capacity_value', models.FloatField(blank=True, null=True)),
                ('total_capacity_unit', models.FloatField(blank=True, choices=[('kg_per_day', 'Kg/day'), ('ton_per_day', 'Ton/day')], null=True)),
                ('registration_number', models.CharField(blank=True, max_length=255, null=True)),
                ('registration_date', models.DateField(blank=True, null=True)),
                ('date_of_setting_up', models.DateField(blank=True, null=True)),
                ('date_of_commencement_of_production', models.DateField(blank=True, null=True)),
                ('flow_diagram', models.FileField(blank=True, null=True, upload_to='diagrams/')),
                ('is_compliance_with_rules', models.BooleanField(default=False)),
                ('valid_consent_permit', models.BooleanField(default=False)),
                ('consent_permit', models.FileField(blank=True, null=True, upload_to='permit/')),
                ('total_waste_generated_value', models.FloatField(blank=True, null=True)),
                ('total_waste_generated_unit', models.CharField(blank=True, choices=[('kg_per_day', 'Kg/day'), ('ton_per_day', 'Ton/day')], max_length=255, null=True)),
                ('is_waste_storage_capacity', models.BooleanField(default=False)),
                ('is_waste_disposal_provision', models.BooleanField(default=False)),
                ('personnel_or_consumers_list', models.FileField(blank=True, null=True, upload_to='consumers/')),
                ('action_plan', models.FileField(blank=True, null=True, upload_to='action_plan/')),
                ('applicant', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='pmc_api.applicantdetail')),
                ('by_products_list', models.ManyToManyField(to='pmc_api.byproducts')),
                ('single_use_plastic_items', models.ManyToManyField(blank=True, null=True, to='pmc_api.plasticitems')),
                ('products_list', models.ManyToManyField(to='pmc_api.products')),
            ],
        ),
        migrations.CreateModel(
            name='RawMaterial',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('material_name', models.CharField(max_length=255, unique=True)),
                ('material_description', models.CharField(blank=True, max_length=255, null=True)),
                ('material_quantity_value', models.FloatField(blank=True, null=True)),
                ('material_quantity_unit', models.FloatField(blank=True, null=True)),
                ('material_utilized_quantity_value', models.FloatField(blank=True, null=True)),
                ('material_utilized_quantity_unit', models.FloatField(blank=True, null=True)),
                ('material_import_bought', models.CharField(blank=True, choices=[('imported', 'Imported'), ('bought', 'Bought')], max_length=255, null=True)),
                ('name_seller_importer', models.CharField(blank=True, max_length=255, null=True)),
                ('is_importer_form_filled', models.BooleanField(default=False)),
                ('producer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='pmc_api.producer')),
            ],
        ),
    ]
